#!/bin/bash

# Test the MongoDB image.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.

set -exo nounset
shopt -s nullglob

source "$(dirname "${BASH_SOURCE}")/lib/init.sh"

function cleanup() {
  for cid in $(docker ps -qa); do
    docker stop ${cid}
    docker rm -vf ${cid}
  done

  if [[ -d ${OS_VOLUME_DIR} ]]; then
    rm -rf ${OS_VOLUME_DIR}
  fi

  if [[ -n "$(docker network ls -qf name=${MONGODB_SVCVAL})" ]]; then
    docker network rm $(docker network ls -qf name=${MONGODB_SVCVAL})
  fi
}
trap cleanup EXIT SIGINT ERR

STARTTIME=$(date +%s)
OPTION=0
USAGE="Usage: $0 [-e] [-v] [-c] [-C] [-a] [-r]"

while getopts "evcCar" opt ; do
  case $opt in
    e ) OPTION=1; echo "Unit test 'test_mongo_envs' (ONLY)"
    ;;
    v ) OPTION=2; echo "Unit test 'test_mongo_vmnt' (ONLY)"
    ;;
    c ) OPTION=3; echo "Unit test 'test_mongo_conf' (ONLY)"
    ;;
    C ) OPTION=4; echo "Unit test 'test_mongo_crud' (ONLY)"
    ;;
    a ) OPTION=5; echo "Unit test 'test_mongo_auth' (ONLY)"
    ;;
    r ) OPTION=6; echo "Unit test 'test_mongo_repl' (ONLY)"
    ;;
    \? ) echo $USAGE
    ;;
  esac
done

shift $(($OPTIND - 1))

case ${OPTION} in
  1 ) test_mongo_envs
  ;;
  2 ) test_mongo_vmnt
  ;;
  3 ) test_mongo_conf
  ;;
  4 ) test_mongo_crud
  ;;
  5 ) test_mongo_auth
  ;;
  6 ) test_mongo_repl
  ;;
  *)
  test_mongo_envs
  test_mongo_vmnt
  test_mongo_conf
  test_mongo_crud
  test_mongo_auth
  test_mongo_repl
  ;;
esac

# [TODO]: Implement help docs unit test
# test_mongo_docs

ret=$?; ENDTIME=$(date +%s); echo "$0 took $(($ENDTIME - $STARTTIME)) seconds"; exit "$ret"
