#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

# shellcheck source=/dev/null
source ${CONTAINER_SCRIPTS_PATH:-}/generate_container_user

# shellcheck source=/dev/null
source ${CONTAINER_SCRIPTS_PATH:-}/common.sh

# shellcheck source=/dev/null
source ${CONTAINER_SCRIPTS_PATH:-}/init-mongod

# shellcheck source=/dev/null
source ${CONTAINER_SCRIPTS_PATH:-}/init-replset

unset share_files share_file
trap cleanup SIGINT SIGTERM

log_info "Checking env variables"
if [[ -n "${MONGODB_REPLICA_NAME:-}" ]]; then
	REPLICATION=1	check_env_vars
else
	check_env_vars
fi

log_info "Checking data directory"
check_data_dir

log_info "Setting up storage cache"
setup_wiredtiger_cache "${CONTAINER_SCRIPTS_PATH:-}/mongodb.conf.template"

log_info "Setting up config file"
if [[ ! -s "$MONGODB_CONFIG_PATH" ]]; then
	envsubst < "${CONTAINER_SCRIPTS_PATH:-}/mongodb.conf.template" > "$MONGODB_CONFIG_PATH"
fi

# [TODO] Capture exit code and print error if initialization failed.
if [[ -n "${MONGODB_REPLICA_NAME:-}" ]]; then
	setup_keyfile

	replicaset &

	(
	unset_env_vars

	log_info "Starting mongo daemon (replica set)"
	$MONGOD --config "$MONGODB_CONFIG_PATH" --keyFile $MONGODB_KEYFILE_PATH --replSet "${MONGODB_REPLICA_NAME:-}"
	) &
	wait
else
	standalone "$MONGODB_CONFIG_PATH" &

	(
	log_info "Starting mongo daemon (standalone)"
	$MONGOD --config "$MONGODB_CONFIG_PATH"
	) &
	wait

	unset_env_vars

	log_info "Stopping mongo daemon"
	$MONGOD --config "$MONGODB_CONFIG_PATH" --shutdown
	wait_for_mongo_down

	log_info "Starting mongo daemon (enable access control)"
	$MONGOD --config "$MONGODB_CONFIG_PATH" --auth
fi
